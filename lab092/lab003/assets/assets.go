// Code generated by go-bindata.
// sources:
// index.html
// test.json
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x59\x79\x73\xdb\xb6\x12\xff\x3f\x33\xf9\x0e\xdb\x74\x5c\xf7\x30\x4d\x8a\x52\x52\x87\x91\x94\x49\x63\xa7\xcd\x9b\x1c\x9e\x58\x79\xc7\x5f\x1d\x88\x5c\x89\xa8\x41\x80\x05\x40\xd9\x6a\xe7\x7d\xf7\x37\x00\x29\xf1\x10\x0f\xf9\xb5\x49\x66\x2c\x11\xd8\xe3\xb7\x07\x76\x17\xd4\xf4\xab\xcb\x8f\xaf\x17\xff\xb9\xbe\x82\x58\x27\x6c\xfe\xf8\xd1\x74\xff\x89\x24\x9a\x3f\x7e\x04\x00\x30\x4d\x50\x13\x88\xb5\x4e\x1d\xfc\x3d\xa3\x9b\xd9\x69\x28\xb8\x46\xae\x1d\xbd\x4d\xf1\x14\x36\x84\x65\x38\x3b\xd5\x78\xaf\x5d\xc3\xfe\x22\x8c\x89\x54\xa8\x67\x99\x5e\x5d\x9c\xee\x84\x68\xaa\x19\xce\x8d\x94\x25\xe5\xdf\x8e\xbe\x0b\xe0\x97\xc5\xe2\x1a\x5e\x33\x8a\x5c\xc3\x02\x95\xa6\x7c\x0d\x37\x28\x37\x34\xc4\xa9\x9b\x93\x17\xbc\x4a\x6f\x19\x82\xd1\x56\xa8\x09\x95\x3a\x85\x04\x23\x4a\x66\xa7\x84\xb1\x9d\x12\xf3\xcf\xfd\x1e\x2c\x79\x00\x09\xe1\xf0\xbd\x5b\xee\x2c\x45\xb4\xfd\x3a\x21\x3c\x25\x6b\x84\x3f\xcb\x75\xf3\x2f\x21\x72\x4d\x79\x00\x5e\xb9\xfc\xdf\xc7\x8f\xca\x87\xf3\x24\x3d\x64\xb9\x77\xee\x68\xa4\xe3\x00\x46\x9e\x87\xf7\x2f\xea\xdb\x29\x89\x22\xca\xd7\x01\x78\xf0\x1c\xef\x61\x84\xf7\x30\xc1\xfb\x1e\xf1\xe9\x59\xfe\x21\x31\xff\x92\xb1\xfc\x53\x14\x9f\x11\xeb\x04\x0d\x1e\xf8\x5e\x7a\xdf\x8b\x3e\xf6\xbb\xd8\x47\x96\xd5\xfc\xef\x61\x9f\xef\xf0\xcd\x4b\x84\xf3\x3d\xc6\xf9\x1e\xe5\xbc\x13\xa7\xc3\x70\xa5\x03\xb8\xe8\x75\x42\x3c\xee\x33\xd2\x1b\x70\x61\xa4\x3b\xb9\x1b\xd1\x09\x19\x12\x19\x80\x81\xd4\x2b\xef\x7c\xc5\x32\x15\x37\xa5\xae\x98\x20\x3a\xe7\x6e\xc8\x2d\x12\xa2\xdf\xc8\x28\xea\x37\xf2\x79\xbf\x8b\x46\x67\x45\x40\x8b\xcf\x71\xf1\x39\x69\x4a\x3d\xce\xc8\x54\x76\x9c\x06\x67\x29\xb4\x16\x49\x60\x73\x6b\x40\xc0\x0f\x7b\x38\xc5\x53\x47\x1c\x1d\x2d\xd2\x00\x7c\xbf\x57\x60\xec\xc3\x0f\x65\x96\xc5\xe3\xfc\xa9\x4f\xe0\xd3\x5e\x79\x34\x59\x37\x99\x23\xaa\x52\x46\xb6\x01\x2c\x99\x08\x6f\x5f\xb4\x47\x83\x64\x5a\xf4\x06\xe2\x3c\x21\xdc\xb1\x95\xaa\x53\x3e\x17\x1c\xbb\x65\xe4\x16\x86\x22\xc2\xc6\xe1\xd7\x3a\xff\xbc\x5d\x46\xf9\x17\x45\x76\xd4\xdd\xf1\x5e\x09\xae\x9d\x15\x49\x28\xdb\x06\x90\x08\x2e\x54\x4a\x42\x7c\xd1\x42\xa4\xe8\x1f\x18\xc0\x68\x92\x36\xab\x16\xa3\x1c\x9d\x18\xe9\x3a\xd6\x01\x8c\xce\x27\xfe\xc5\xd3\x1f\x47\xc5\xdf\xf1\x83\xaa\x4b\x55\xcf\xb3\x21\x3d\xfe\xd3\x5e\x3f\xf7\xc8\x36\xb9\xd9\x27\xdb\x3f\xbe\xa0\x9b\xce\xe2\x10\x46\xd7\x3c\x80\xdf\x32\xa5\xe9\x6a\xdb\x90\xbc\x24\xe1\xed\x5a\x8a\x8c\x47\x01\x7c\xbd\x5a\xad\xfe\x8f\xc0\x9a\x44\x2e\x97\x5b\xc3\x7c\x70\x8c\x05\x13\x32\x80\xaf\x47\xe3\x91\x3f\x1a\xfd\x3d\x95\xa1\x10\xe9\x8d\x3d\xdf\xeb\x13\x99\xb5\x3a\x29\xc2\x50\x48\xa2\xa9\xe0\x01\x64\x3c\x42\x69\x5c\xde\x23\xa5\x34\x58\x69\x29\xf8\x3a\xff\xbe\x6c\x0d\xeb\x5d\x11\xb8\xa5\x60\x51\xb3\x68\x1f\xeb\x08\x4c\x72\x0d\x1b\x22\xdb\x53\x27\x1f\x10\xa8\x26\x8c\x86\x1d\x4a\xfc\xb1\xef\xfb\xa3\x17\x03\xd6\xf7\x1f\x6f\x20\x39\x0e\x12\x30\xca\x6f\x77\xdf\x63\xb1\x41\x59\x3c\x54\x5c\x43\xca\x24\x21\xfb\xc4\x20\x65\x6a\x90\xde\xe4\xf0\x3c\xcf\xeb\x4b\x48\x58\xda\x62\x25\x71\xd5\xeb\x75\x2e\x64\x42\x58\x87\x4b\x26\xe3\x89\x3f\xe9\xf3\x7b\x4b\x95\xae\x8c\x41\x03\xe3\x4f\x71\x30\xbe\x20\xbc\xb2\xaf\x74\xf5\x94\x02\x6d\x31\xaa\x74\xcd\x43\x82\x59\x5f\xda\x3c\x38\xab\x3d\x01\xa3\x5d\xad\x7d\x6c\x87\xac\x7c\xd6\xea\x1c\x15\x9b\xb5\x7a\x68\xce\x18\x8f\x4f\x0e\x8a\x9f\x2a\xf2\xdb\x4e\xe7\x79\x86\xb6\x65\xb1\x96\x84\xab\x95\x90\x49\x00\x59\x9a\xa2\x0c\x89\x6a\xd2\xed\x1c\xfb\xfc\xf9\xf3\xa6\x16\xd4\x1a\xa5\x63\xfa\x8b\x05\x3e\xea\xec\xbf\x35\xef\xfc\xd9\x6a\xc4\xc8\xf3\x4e\x8e\xe1\x66\xf4\x5c\x1f\xcc\x96\xd5\xa2\xdd\x33\xe8\x1c\x08\x0a\xfb\x04\x85\xc8\x35\xca\x01\x9b\x27\xc7\xd9\x6c\x94\x1d\x58\x5e\x55\x26\x4d\x6a\xb7\x07\xde\x6e\xd5\x94\x98\x8f\xa9\x6b\xe3\xfb\xd7\x2e\x47\x17\x5e\x58\xbb\x1c\xf5\x5f\x70\x2e\x9e\x75\x9e\xdd\xec\x20\x24\x65\x0a\x06\xf0\xe1\x30\xfb\x6a\xb7\x81\x11\x26\xf0\x15\x4d\x52\x21\x35\xe1\xdd\x53\x2a\xe1\x0e\x27\x1b\xba\xb6\x55\xf7\x40\x5f\x2e\xc9\x1b\x35\x30\xd6\x7d\x35\x75\x8b\x2b\xed\xe3\x47\xd3\x88\x6e\x20\x64\x44\xa9\xd9\x69\x92\xee\x6f\xa8\xf1\xe8\xf0\x7a\xfa\x09\x7f\xcf\x50\x69\xf8\x86\x24\xe9\x0b\xf8\x84\x2a\x15\x5c\x61\x79\x4d\x8d\x47\x56\xe2\x4e\x82\x0f\x34\x9a\x3d\xb9\xfa\x70\x79\xfd\xf1\xed\x87\xc5\xcd\x93\xf9\xfe\xeb\xd4\x8d\xfd\xf9\x9e\x30\x63\x95\xa0\x4c\x19\x9d\x4f\x09\xc4\x12\x57\xb3\x27\xee\x13\x88\x88\x26\xce\x92\x48\x74\x4c\xd7\x98\x3d\xd1\x32\xc3\x27\xf3\xa9\x29\x8e\x73\x77\xea\xda\xcf\xa9\x4b\xe6\xb0\x88\xa9\x02\x73\x9b\x3d\x9f\xba\x8c\x76\x4a\xa4\xe9\x80\x4c\x9a\x56\xa5\x7e\x42\x9d\x49\xae\xe0\xa3\xa4\x6b\xca\xe1\xed\x75\xbf\xf4\x2c\xa3\xd1\x80\x7c\x43\xd2\xa6\xe1\xf3\xe7\xb7\x97\x93\x01\xe9\x0a\xa5\x43\xd6\xc8\xf5\x90\x8e\x3d\x61\x9b\xa6\x72\xb7\x5f\x9d\x49\x11\x94\x6a\x40\x57\x41\xd5\xa6\x28\xdf\x82\x88\x86\x03\x9a\xd6\x38\x64\xd1\x1a\x5b\x4d\xf9\xf9\x6a\x61\xf9\x5a\xc5\xe7\x9c\xa9\x50\x3b\xd6\x3d\xdb\xf5\xc7\x9b\x61\x3e\xa2\xc3\xf8\x80\xf1\xd5\xe2\xf5\x2f\x83\x9c\xd9\xa1\xc2\xcf\x83\xfa\x22\x64\xa8\xb1\xc9\x78\x79\xf5\xee\x6a\x71\x65\x79\x7b\x3d\x48\xf8\x56\xc7\x94\xaf\x07\xdc\xb8\x23\x6b\xf3\xa5\x2c\x4e\xb7\x11\x70\x06\x94\x87\x2c\x33\x8d\x18\x12\xd4\xb1\x88\xea\x55\x26\x53\x18\x9d\x57\xb0\x74\x5a\xb5\x53\xe8\x06\x0d\xd5\x83\x6a\x75\x8c\xf0\xf9\xd3\xbb\xfe\xc4\x41\x1e\x0a\x43\xed\x66\x7a\x75\xb1\xb7\xb2\xb6\xda\x66\xaa\x7d\xe9\x15\x0a\xae\x09\xe5\x46\xd7\xe7\xc5\x1b\xe7\xa2\x3b\x40\x65\x9e\xfe\x31\x58\x3e\x0c\x49\x9b\x4a\xb3\xee\x58\x60\x18\x1d\xa1\x29\xc2\x15\x23\x1a\x07\x94\x15\x54\x6d\xfa\x8a\xad\x07\xa8\x5c\x4a\xa1\x19\x1d\xd0\x98\x13\xb5\x29\xcc\x77\x1e\xa0\x4f\x69\xa2\x33\xe5\x4e\x46\x65\xe0\x8a\xa5\xc0\x3c\xb5\x3a\x91\x6e\x90\xe7\xbd\xe8\xc6\x92\xda\x21\xb9\x5f\x8d\x2c\xda\x94\x53\x14\xaa\x97\xa6\x5d\xa1\x9c\x15\xdd\xcd\xf6\xb2\xd7\xc5\x2b\xdc\x85\x99\x1b\xcc\xd8\x70\xe2\xbf\x49\x19\xa1\xfc\x64\xfc\xd3\x0f\xc5\x0b\xdc\x93\xf1\xa5\x4d\x93\x3d\xd8\x03\xc1\xb7\xb8\x9d\x6d\x08\xab\x00\xaf\x1f\x9a\xba\x15\x3b\xf6\xa2\x4a\xaa\x81\xe3\x54\xb1\x27\xa2\x12\x43\xed\x3e\xab\x20\x29\x96\x02\x5e\xf5\xda\xd8\xf3\xe1\x53\xb1\xa5\x60\x8a\xc9\x9c\x4f\x5d\x4c\xe6\xa0\x69\x82\x6a\xc8\x6b\x39\x9f\xa3\xc5\xcb\x4c\x32\xeb\xad\x93\xf1\xab\x13\xff\xcd\x89\xff\x06\xef\x49\x92\x32\x3c\x0f\x45\x72\xe2\xbf\x39\x80\xb1\xe3\x59\x09\xd1\x09\xa7\x31\x01\x0a\x7b\xdc\x0d\x44\xcb\x64\x40\x9a\xb3\xff\x40\x97\x1c\x01\xd6\x86\x3b\x4f\xb3\x5f\x0d\xb4\xd9\xd8\xfb\xb1\xcf\x80\x6f\x1a\xb4\x9d\xc1\x1d\x7b\x3f\x56\x9c\xfd\x97\x0d\x62\x44\xd3\x0d\x3a\xad\xc1\x6e\xee\xb5\x45\x3d\xa7\x01\xd9\x12\xfe\x86\xeb\x6d\x2e\x1c\x89\x8b\x2c\x95\x60\x99\x6e\xc5\x75\xb8\x77\x88\xeb\x55\x41\xf3\x77\xe3\x0a\x85\xb8\xa5\x38\x34\xa9\x14\x54\x6d\x85\x25\xdf\x3a\xa2\x68\x15\x32\x5c\x85\xfa\xe5\xed\x68\xb6\x19\xd9\x84\xba\xf5\x67\x1b\xbf\xa9\xc7\xd2\x70\x92\xe0\xcc\xfe\x26\x54\x55\x7b\x83\x5a\x81\xe0\x08\x42\x42\x22\x24\x82\xa2\x26\x47\x9b\x17\x4e\x2b\xe6\x81\x3e\x28\xe6\x08\x03\x6e\x07\xed\x00\x58\x41\x62\xb0\x55\x51\x5d\xda\xe5\xbf\x1d\xd8\x92\x28\x1a\x3a\x24\xd3\xb1\x9d\x4b\xdd\x94\x28\x75\x17\x95\x1d\xa5\xdc\x0e\xec\x7e\x90\x13\x54\x91\xbd\x8e\x09\x63\xc8\xd7\xa8\x6c\xf1\xff\xc9\xb0\xc0\xab\x4c\xc7\x03\x03\x2c\x8d\x22\xe4\xce\x00\x80\x43\xaa\x4e\x1c\x13\x6f\x72\x1a\x81\x55\x6f\xb5\xf7\x7a\xa0\xee\xb4\x4a\x6b\xa7\x6b\x54\x3a\xd7\xd4\x04\xe5\xbe\xbf\x7c\xea\x72\xdc\xa0\x2c\x7b\x7c\x85\x3c\xf8\x5d\xa4\x75\x74\x6e\x40\xd8\x5a\x48\xaa\xe3\xa4\xb3\x34\x35\xbc\x07\x97\x56\x22\x0c\x5b\xf0\x85\x30\x7f\x49\xa0\x4a\x4b\x24\x89\xeb\x7b\x95\x99\xc2\xae\xd4\x8b\xd1\x8d\x5d\xcc\xab\x4f\x42\xf9\xb7\xfc\x0c\x46\x9e\xf7\x5d\x5e\xa8\x19\xe5\x43\xed\x31\x42\x46\xb6\xee\xb8\x32\x88\x99\xe7\xba\x8e\x4b\xb3\xa6\x8a\x3e\x6f\x47\xda\x95\x90\x75\x8d\x85\x42\x85\xa1\xe0\xd1\x90\x4a\x49\xd3\x97\x51\x96\xbf\x6b\x9d\x3d\xb5\x87\xdb\x76\x25\xdf\xf3\xec\x03\xcf\x92\xe5\x56\xa3\x9a\x3d\x2d\x61\x19\x9e\xfd\x7a\x3e\xeb\xec\x45\xa8\xfc\xd1\xa0\x2c\xbe\x5b\x71\x8d\xd9\xab\x1e\xa1\x4b\x49\x53\x65\xcb\x24\x88\x0d\x4a\x20\xb0\x13\x07\x64\xa5\xcd\x02\x07\x91\x9a\x67\xc2\x80\x72\xaa\x29\x61\x60\x55\x9c\x99\x86\xc8\xe1\xdb\xdd\x2e\xdb\x7e\x07\xb2\xa8\xbe\x77\x54\xc7\xb6\x5f\xe6\x93\x51\xde\x72\x9b\x35\x27\xc2\xa3\xbb\x27\xe1\x6b\x74\x47\x9e\x3f\x29\x9b\xe6\x7e\xe9\x65\xc3\xfe\x30\xce\xf8\xed\xaf\x8a\xfe\x71\x60\x79\x2d\x49\x8a\xc9\xc9\x3a\xf2\xac\x0e\x8d\xf0\x08\x08\x63\xe2\x4e\x81\x4a\x31\xa4\xab\xad\x89\x35\xb1\x6c\x9f\x8c\xde\x9c\xb5\xb8\x0c\x6b\x01\x0a\x19\x86\x1a\x08\xa8\x6c\xa9\x50\x83\x58\x59\xe3\x6d\xf3\x81\x57\x61\x88\xa9\x56\x05\x7f\x89\xae\xa5\x45\x1a\xc5\xbb\xdb\x93\x21\xde\x59\x96\xeb\x4b\x89\x24\x09\x6a\x94\xc7\xba\x2d\xd6\x09\x1b\xba\xeb\xeb\x84\xd5\xdb\x27\x37\xa3\xab\x89\xfa\x2f\x8b\xf7\xef\xe0\x7a\xf0\xf5\x8b\x14\x4b\xa1\xd5\xb9\xbe\x1f\xba\xf0\x97\x84\x6d\xfd\x5a\x89\x04\xa1\x24\x01\x99\xb1\xe1\x23\xcb\xb7\x83\xd7\x29\xbe\xad\x9f\x60\x4e\x31\x82\xe5\xb6\xaa\x6a\x45\xd9\x80\x8d\x21\x09\xe3\xa1\x9b\x9b\xa5\x69\xb3\xcc\xf7\x3c\xc8\x38\x43\x65\xbd\xfa\x76\xe5\xbc\x17\x11\x5d\x51\x8c\x9c\x1b\xca\x43\xd3\x98\xeb\x49\xf0\x76\xe5\x7c\x10\x1c\x9d\xf7\x44\x87\xf1\x2e\xc9\xa8\x82\x54\x8a\x0d\x8d\x30\x3a\x83\x3b\x73\xee\xa8\xde\x9f\x36\x02\x63\x6f\x72\x6c\x52\xa0\x26\x6b\xfb\xa7\xbc\x5c\x9b\x95\xc0\xfc\xad\xc2\x7f\xa5\x54\x96\xa0\xb2\x89\x2c\x51\x89\x4c\x86\x08\x31\x51\x95\x63\x6d\x58\x8a\x9c\xb5\x15\xd1\x4c\xc9\x47\xd8\x62\x8b\x03\xb1\x7e\x11\xd2\x40\xb7\x32\x8c\x63\x2c\x55\x7d\x7b\x32\xf2\x81\x28\x20\x69\x2a\x45\x2a\x29\xd1\x47\x17\x0d\x1b\x10\xf7\x99\x57\x8f\x50\xb3\x6d\xa0\x3d\x99\xaf\xcd\x96\x63\x2e\x8d\x52\xb0\x1d\xce\x5d\x71\xe7\x0f\xa8\xe9\xb6\x9c\xd4\x2b\x55\xbe\x54\x57\xfb\x33\x72\x94\xc4\x8c\x66\x15\x05\x92\xf0\x48\x24\x79\x45\x32\x25\x64\x49\x39\x91\xdb\xe2\x35\x0a\xc9\xab\x48\xdd\xbd\xfb\xc2\x6c\xa4\x28\xc4\x28\x17\x44\xb9\xc6\x35\xca\x87\x17\x8c\xbc\xb3\x3a\x2d\x46\xd4\x76\xba\x3b\x6f\xaf\x25\x75\xec\xb6\xe5\x50\x0e\xb6\x20\x62\x04\xbb\x57\x3c\x7b\x53\xbb\xac\x33\xc9\xd2\x52\x49\x0f\xad\x3e\x7a\x9e\x35\xa7\xd9\xd8\xbb\xb7\x36\x5f\xa8\x9b\xd9\xf5\xa6\xa9\x62\xb6\xad\x98\x96\x77\xe0\x8d\x75\x42\xd6\x95\xd7\xd3\xe6\xe9\x18\x4d\x84\x83\xa5\x85\x25\x51\x18\x81\xe0\xa0\x90\xeb\xa2\xbf\x14\x49\x7b\x84\x62\x37\xe5\xeb\xba\x72\xb3\xd2\x06\x80\xc0\xf5\x87\x9f\x73\x9d\xc7\xc8\xfd\x2d\xc5\xa6\x60\xb3\xd4\x2e\xf9\x1f\xd7\x57\x0f\x10\x7d\x87\xcb\xb4\x21\xda\x2c\xb5\x8b\xfe\xd7\xd5\x4f\xd7\xc7\x8b\x56\x9b\x26\x68\xb5\xe9\xc0\x7c\xf3\xcf\xa3\x20\xaf\x84\x4c\x94\x7d\x4b\x3d\xd0\x32\x4a\xc2\xaa\x3e\x9b\x45\x66\x0b\x74\x4c\xb4\x19\x29\x12\xaa\x0f\x4b\xab\xc9\xbb\x82\x17\x93\x79\x2f\xa0\xfb\xc1\x31\xe0\xbe\x39\x05\x54\x9a\xf2\xbf\xdf\xbf\xab\x48\x9f\xba\xf6\xc7\x9d\xa9\x1b\xd1\x4d\xfe\x6b\x93\xbb\x14\xd1\x36\xff\x05\x4a\x27\x6c\xfe\xbf\x00\x00\x00\xff\xff\xd9\xb7\xac\x1a\x74\x29\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 10612, mode: os.FileMode(438), modTime: time.Unix(1513753337, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xe6\xe5\x52\x50\x50\x2a\x2d\x4e\x2d\xca\x4b\xcc\x4d\x55\xb2\x52\x50\xca\x48\xcd\xc9\xc9\x57\xd2\x01\x8b\x17\x24\x16\x17\x97\xe7\x17\xa5\x80\xc4\xcb\xf3\x8b\x72\x52\x94\x78\xb9\x6a\x01\x01\x00\x00\xff\xff\xaa\x93\xe8\xc0\x33\x00\x00\x00")

func testJsonBytes() ([]byte, error) {
	return bindataRead(
		_testJson,
		"test.json",
	)
}

func testJson() (*asset, error) {
	bytes, err := testJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test.json", size: 51, mode: os.FileMode(438), modTime: time.Unix(1513754275, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
	"test.json": testJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
	"test.json": &bintree{testJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

